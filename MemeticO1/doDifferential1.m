% Differential evolution
function newSols = doDifferential1(inSols,memParams)
   newSols = [];
   numPat = memParams.numPat;
   % Extract basic information
   [yLeng xLeng] = size(inSols);
   numSols = yLeng;
   numParam = xLeng - 1 - numPat; % the leftmost column holds solution costs
   % Set index of first leader (i.e. the best solution)
   li = 1;
   % List of velocities (for average or "grand velocity")
   listVelocs = zeros(1,numParam);
   lvi=1;
   % Iterate
   numDone = 0;
   paramStart = 2+numPat;
   errPat0 = zeros(1,numPat);
   while (li < numSols) && (numDone < memParams.numDESol)
      leader = inSols(li,paramStart:end);
      % Search for the closest, "non-identical" follower (in other versions more followers per leader might be used)
      incfoli = firstDiffSol(leader,inSols(li+1:end,paramStart:end),memParams.minDiffLF);
      if incfoli ~= -1
         foli = li+incfoli; % add increment (incfoli is relative to the matrix subset given)
         follower = inSols(foli,paramStart:end);
         % Generate DE solution
         velocVec = memParams.alpha*(leader-follower);
         newSol = leader + velocVec;
         newSol = normSol(newSol,memParams.paramRange);  % because of <0 and >1
         numDone = numDone + 1;
         % Store DE solution (set cost to -1)
         newSols = [newSols; -1 errPat0 newSol];
         % Store velocity
         listVelocs(lvi,:) = velocVec;
         lvi=lvi+1;
         % Get index of next leader 
         incli = firstDiffSol(leader,inSols(li+1:end,paramStart:end),memParams.minDiffLL); % if li==0 return first solution
         if incli == -1
            li = Inf;
         else
            li = li + incli;
         end 
      else
         li = Inf;
      end
   end
   % Generate the "grand velocity"
   grandVeloc = memParams.gvAmplify*mean(listVelocs);
   firstLeader = inSols(1,paramStart:end);
   newSol = firstLeader + grandVeloc;
   newSol = normSol(newSol,memParams.paramRange);  % because of <0 and >1
   newSols = [newSols; -1 errPat0 newSol];
   % Display the number of new solutions generated
   if memParams.vis_verbose == 1
       numExpand = numDone+1;
       disp(['Number of new solutions generated by differential evolution: ' num2str(numExpand)]); 
   end
   % Apply fixed parameters
   %newSols = fixSolParam(newSols,memParams.fixParams);


end

